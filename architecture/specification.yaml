### DOCUMENT CONVENTIONS

#
# UI elements: like-this
#
# Data: camelCase
#
# Messages: LIKE_THIS(payload)
#
# 
#

### OVERALL UI ARCHITECTURE

#
# views: Each view shows a different set of records (before filtering on geo or metadata).
#        The records for each view may have a different set of fields, though ideally some will be overlapping so that
#        at least some filters can be "carried over" when switching between views.
#        
# markers: A set of available/allowed marker classes is configured per view.
#          All views must have at least one marker type configured.  Markers will always be
#          semantically zoomed according to either geohash_x fields or some other fields (e.g. country, adm1, adm2).
#          Markers that need special data (e.g. data specific to chromosomal inversions) need
#          marker-type-specific data service endpoints.
#
# panels: A set of available/allowed panel classes is configured per view.
#         Example panels would be "details table" or "stacked timeline plot" or "download CSV"
#         Panels are responsible for requesting their own data, but have access to application-wide filters.
#         Panels should ideally offer the choice of displaying data for
#         a) the current selected marker(s)
#         b) the current visible markers (in the viewport)
#         c) all data matching the current metadata-based filters
#         d) all data
#
# At a time, one view, one marker type and one panel can be active.  We are thinking of putting
# these in the URL (single page application with forward/backward history).
#
# "Page" URLs could therefore be
#
#  /view/ViewName/marker/MarkerType/panel/PanelType?other=params
#
# or more simply
#
#  /ViewName/MarkerType/PanelType?other=params
#
# however, the more verbose URL scheme might allow for more complex behaviour in
# future (e.g. multiple markers active at once: /view/ViewName/markers/MarkerType1/MarkerType2/panel/PanelType?other=params )
#
# The data service (see https://github.com/bobular/mapveu-rest-prototype) also a /view/ViewName prefix to its endpoint URLs.
# Which means that /view/Sample/marker/RecordCount/markerData should return different data compare to
# /view/Genotype/marker/RecordCount/markerData
#
#
## filters (in the data structure sense)
# filters:
#
#  geo-based: viewport bounding box, current selected marker(s) and or drawn polygons - referred to as SELECTIONS
#             all geo-based filters use geo fields
#
#  metadata-based: e.g. species=Anopheles gambiae, date="2002 to 2005"                - referred to as FILTERS
#
## filters (in the UI component sense)
#
# The legend and date picker are filters that should probably stay on the screen
# independently of panels.  But they should probably be organised in the same
# modular fashion as panels.  So state data would be organised something like this:
#
#   filters.legend.paletteData
#   filters.legend.categoryCounts
#
#   filters.datePicker.dateResolution
#   filters.datePicker.timelineData
#
#
##
# field names: The 'species' and 'date' field names in the filter examples above will be configured per view.
#              For a given field, there could be a display field and a search field.  The display field
#              might be single-valued string-type (in terms of Solr faceting behaviour) while the search
#              field could be multi-valued and contain parent ontology terms, synoyms etc.
#
# 




### UI ELEMENTS

#
# isCore: would this element exist in a map with no plugins configured?
#

the-map:
  description:
    The main zoomable map, handled by Leaflet.js.  Usually full-screen, but not necessarily.
  isCore: true
  events:
    navigating:
      description: user is zooming, panning, or resizing their browser window
      emits: MOVING_OR_ZOOMING(), CLEAR_SELECTION()  (maybe both not needed)
    finished_navigating:
      description: user has finished navigating
      emits: MOVED_OR_ZOOMED(new bbox)
    click_in_map:
      description: user clicks in the map, NOT on a marker or any other element
      emits: CLEAR_SELECTION()
    drawn_polygon:
      description: user has drawn a rectangle or polygon to make a selection
      emits: REPLACE_SELECTION(polgon)
    add_drawn_polygon:
      description: user has drawn a shape with CTRL key (or equivalent) pressed because they want to add to previous
      emits: ADD_TO_SELECTION(polygon)
    remove_drawn_polygon:
      description: user cancels previously drawn polygon
      emits: REMOVE_DRAWN_POLYGON(polygon)
      notes:
        Will the polygon persist as an element/component on the map? Probably.
        In that case the polygon will be its own element, and this event will be handled
	by that, not 'the-map'.
      

the-markers:
  description:
    A layer of clickable markers (could be circles, polygons, rectangles, depending on marker plugin/class).
    To start with, just one layer would be shown. Still thinking about whether or not to have multiple layers
    of markers (if they are visibly different perhaps it's OK).  Another thing we will add is multiple
    layers of continuous data (e.g. climate, land use) shown as semi-transparent bitmap or vector graphics.
  isCore: false  # though map will ship with basic markers
  consumes: markerData

a-marker:
  description: one marker from the-markers
  isCore: false
  consumes: markerData
  events:
    click:
      description: user clicks normally on a marker
      emits: REPLACE_SELECTION(polygon)   # technically the payload could be a polygon
                                          # (bounding box of the marker's aggregated data) or
                                          # a filter on the aggregating field, e.g. geohash_x:abc or country:Mali
					  # It might be simpler to keep it all geometry based.
    ctrl-click:
      description: user is adding (or removing if already selected) another marker to the selection
      emits: ADD_TO_SELECTION(polygon) or REMOVE_FROM_SELECTION(polygon)
  notes:
    Need to thrash out the mechanics of adding and removing markers from a multi-selection.
    Does a marker itself know if it's selected?  Or does the central state management keep track?
  

marker-selector:
  description:
    Allows the user to choose which type of marker (from those configured for this view) to use
  isCore: true
  consumes: availableMarkers, activeMarker
  events:
    on-change:
      emits: SET_ACTIVE_MARKER(markerType)
      

view-selector:
  description:
    allows user to choose between views (e.g. sample view, abundance view, genotype view)
  isCore: true
  consumes: availableViews, activeView
  events:
    on-change:
      emits: SET_VIEW(viewName)


panel-selector:
  description: allows the user to choose/focus one panel from the panels available for the active view
  isCore: true
  consumes: availablePanels
  events:
    on-change:
      emits: SET_ACTIVE_PANEL(panelType)


#
# the next two panel components (details-table and stacked-timeline-plot)
# are examples of content that needs to be rendered and updated when the panel
# is active (e.g. in focus/foreground/selected by user) only
#

details-table:
  description:
    One of many classes of pluggable panel but will be used as a primary example here.
    Shows record data in a table.
    Would be rendered in a panel of class DetailsTable (aka InfoTable in the Vue prototype)
  isCore: false
  consumes: panels.detailsTable.recordData

details-table-ui:
  description: UI for choosing which columns to show (for example)
  isCore: false
  consumes: activePanel.columns # columns could be configured in the config object
  events:
    on-change:
      emits: SET_DETAILS_TABLE_COLUMNS(columns)


stacked-timeline-plot:
  description:
    Another example of a panel that may only be available in some views.
  isCore: false
  consumes: panels.stackedTimelinePlot.timelineData

stacked-timeline-plot-ui:
  description: UI for setting the date resolution for the timeline plot
  isCore: false
  consumes: panels.stackedTimelinePlot.dateResolution, currentView.availableDateResolutions (from config)
  events:
    on-change:
      emits: SET_STACKED_TIMELINE_PLOT_RESOLUTION(dateResolution)
      



active-filters:
  description:
    The place where currently active filters (on date and/or metadata but not on geolocation) are displayed.
    In MapVEu 1.0 these are displayed in the search-box.
  isCore: true


search-box:
  description:
    A place for users to type to create filters with the help of autocomplete/suggest
  isCore: true



date-picker:
  description:
    A date range selector (that emits a date filter) that also displays a simple histogram of number
    of records per year/month/day as appropriate
  isCore: false  # shipped map should work for data with no date fields, so this should be configurable
  consumes: filters.datePicker.timelineData, filters.datePicker.dateResolution
  events:
    on-submit:
      description: user has selected a date range and clicked submit, filter created is date-based
      emits: ADD_TO_FILTERS(filter)

date-picker-ui:
  description: user-selected date resolution (as an example - scrolling and zooming could also be part of the date picker histogram)
  isCore: false
  consumes: filters.datePicker.dateResolution, currentView.availableDateResolutions (from config)
  events:
    on-change:
      description: update the date resolution
      emits: SET_DATEPICKER_DATE_RESOLUTION(dateResolution)



the-legend:
  description:
    A classic "search filter" listing the number of displayed records stratified by a metadata field ("category field" aka catField)
  isCore: true
  notes: TBC another time



### STATE DATA

availableViews:
  description: A list of views available in this instance of MapVEu. From config.

activeView:
  description: The current active view selected in view-selector

markerData:
  description:
    An array of data structures - one per marker, containing the result of the server-side aggregation,
    which is basically counts per species (if catField is species)

availableMarkers:
  description: A list of the markers that are available in the active view. From config.

activeMarker:
  description: The currently active marker type

availablePanels:
  description: A list of the panels that are available in the current view. From config.
  
activePanel:
  description: The currently active panel type

userBBox:
  description: The user's current viewport bounding box in map coordinates

userFilters:
  description: a list of currently active metadata-based filters

userSelection:
  description: a list of currently active geo-based filters


panels.detailsTable.recordData:
  description: the current 'page' of records for display in a table

panels.detailsTable.showColumns
  description: which columns the user has currently selected for display (and perhaps their order)
  
panels.stackedTimelinePlot.timelineData:
  description: the data needed to show a stacked timeline plot

panels.stackedTimelinePlot.dateResolution:
  description: day, week, month or year (aggregation level for timeline plotting)


filters.datePicker.timelineData:
  description: simple counts of records per date unit (day, week, month, year) for display in a bar chart

filters.datePicker.dateResolution:
  description: day, week, month or year (aggregation level for simple timeline plotting)


### MESSAGES

#
# synchronous unless marked as
#   async: true
# 

MOVING_OR_ZOOMING:
  description: user is moving or zooming around the map, or resizing their window
  payload: 
  action:
    description: need to hide any panels so the user can see the full extent of the map
    emits: HIDE_PANEL()

MOVED_OR_ZOOMED:
  description: user has finished panning/zooming/resizing their browser window 
  payload: new_bbox
  action:
    description: updates the bounding box
    updates: userBBox = new_bbox
    emits: UPDATE_MARKERS()

UPDATE_MARKERS:
  description: update the aggregated marker data. Downstream, 'the-markers' will need to be redrawn
  payload:
  action:
    description: sends request to back end for new aggregated marker data
    consumes: userBBox, activeView, activeMarker, userFilters, catField
    updates: markerData
    async: true

SET_ACTIVE_MARKER:
  description: change the current type of markers displayed, if no payload then set to default marker type
  payload: markerType
  consumes: availableMarkers
  action:
    updates: activeMarker = availableMarkers.filter(type==markerType || default==true)
    emits: CLEAR_SELECTION(), UPDATE_MARKERS()    
    notes: Clear selection even if that selection is purely polygon based?

SET_AVAILABLE_MARKERS:
  description: sets the available marker types (primarily needed for the marker select menu)
  payload: markerType
  consumes: activeView
  action:
    updates: availableMarkers = activeView.markers
    emits: SET_ACTIVE_MARKER()

SET_VIEW:
  description: change the view or set to default view if no payload
  payload: viewName
  consumes: availableViews
  action:
    updates: activeView = availableViews.filter(name==viewName || default==true)
    emits: CLEAR_SELECTION(), SET_AVAILABLE_MARKERS(), SET_AVAILABLE_PANELS()    
    notes: Clear selection even if that selection is purely polygon based?

SET_ACTIVE_PANEL:
  description: change the active panel or set to default panel if no payload
  payload: panelType
  consumes: availablePanels
  action:
    updates: activePanel = availablePanels.filter(type==panelType || default==true)
    emits: UPDATE_ACTIVE_PANEL_CONTENTS()   

SET_AVAILABLE_PANELS:
  description: sets the available panel types (primarily needed to render the panel tabs)
  payload: panelType
  consumes: activeView
  action:
    updates: availablePanels = activeView.markers
    emits: SET_ACTIVE_PANEL()


UPDATE_ACTIVE_PANEL_CONTENTS:
  description:
    This is where it gets tricky. A panel could be a "DetailsTable" or it could be a "StackedTimelinePlot".
    I'll describe what should happen in both cases below.  But how this works in React I don't know.
  payload: none
  consumes: activePanel
  actions:
    DetailsTable:
      consumes: activeView, userSelection, userFilters, panels.detailsTable.showColumns
      updates: panels.detailsTable.recordData = ajax('api/panels/DetailsTable', activeView, userSelection, userFilters, panels.detailsTable.showColumns)
      async: true
      notes: paging & sorting params not yet included here
    StackedTimelinePlot
      consumes: activeView, userSelection, userFilters, panels.stackedTimelinePlot.dateResolution
      updates:
        panels.stackedTimelinePlot.timelineData = ajax('api/panels/StackedTimelinePlot', activeView, userSelection, userFilters, panels.stackedTimelinePlot.dateResolution)


SET_STACKED_TIMELINE_PLOT_RESOLUTION:
  description: updates the timeline plot date resolution
  payload: dateResolution
  consumes:
  action:
    updates: panels.stackedTimelinePlot.dateResolution = dateResolution
    emits: UPDATE_ACTIVE_PANEL_CONTENTS()

SET_DETAILS_TABLE_COLUMNS:
  description: updates the column selection/order for the detailsTable
  payload: columns
  consumes:
  action:
    updates: panels.detailsTable.showColumns = columns
    emits: UPDATE_ACTIVE_PANEL_CONTENTS()





SET_DATEPICKER_DATE_RESOLUTION:
  description:
  payload: dateResolution
  consumes:
  action:
    updates: filters.datePicker.dateResolution = dateResolution
    emits: UPDATE_DATEPICKER()

UPDATE_DATEPICKER:
  description:
  payload:
  action:
    consumes: activeView, userFilters, filters.datePicker.dateResolution
    updates:
      filters.datePicker.timelineData = ajax('api/filters/DatePicker', activeView, userFilters, filters.datePicker.dateResolution)
    async: true
    


ADD_TO_FILTERS:
  description: add a new metadata-based filter to userFilters
  payload: filter
  action:
    updates: userFilters = userFilters + filter
    emits: UPDATE_MARKERS(), UPDATE_ACTIVE_PANEL_CONTENTS()  # and UPDATE_DATEPICKER(), UPDATE_LEGEND()... and any action that depends on userFilters - subscriptions?



#
# TBC...
#



REPLACE_SELECTION:
  description: click on a marker, draw a rectangle or polygon
  payload: bbox or polygon + unique_id


ADD_TO_SELECTION:
  description: ctrl-click marker (multi-select), multi-select rectangle/polygons
  payload: bbox or polygon + unique_id

REMOVE_FROM_SELECTION:
  description: ctrl-click already selected marker or drawn rectangle/polygon
  payload: unique_id (see previous two payloads)
  recipients: core

CLEAR_SELECTION:
  description: click somewhere outside markers/selection
  payload: none
  recipients: core




